#!/bin/bash
set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

echo "üîç VERIFICACI√ìN DE CONFIGURACI√ìN DE PUERTOS - Industrial IoT"
echo "==========================================================="

# Verificar directorio
if [ ! -f "server/.env" ]; then
    log_error "No se encontr√≥ server/.env - aseg√∫rate de estar en /root/industrial"
    exit 1
fi

log_info "PASO 1: Verificando configuraci√≥n de puertos actual"

echo
echo "=== Variables de entorno backend ==="
echo "Archivo: server/.env"
cat server/.env | grep -E "PORT|NODE_ENV" || log_warning "No se encontr√≥ PORT en server/.env"

echo
echo "=== Puertos en uso actualmente ==="
echo "Verificando qu√© puertos est√°n ocupados:"
netstat -tlnp | grep -E ":(3000|3001|5000|80|443)" || log_warning "No hay procesos en puertos esperados"

echo
log_info "PASO 2: Verificando procesos Node activos"
echo "=== Procesos Node corriendo ==="
ps aux | grep -E "(node|next)" | grep -v grep || log_warning "No hay procesos Node corriendo"

echo
log_info "PASO 3: Tests de conectividad por puerto"

# Test puerto 3000 (Frontend)
echo
log_info "3.1 - Testing puerto 3000 (Frontend esperado)"
if curl -f -s http://localhost:3000/ >/dev/null 2>&1; then
    log_success "‚úÖ Puerto 3000 responde (Frontend)"
else
    log_warning "‚ö†Ô∏è  Puerto 3000 no responde"
fi

# Test puerto 3001 (Backend producci√≥n)
echo
log_info "3.2 - Testing puerto 3001 (Backend producci√≥n)"
if curl -f -s http://localhost:3001/api/health >/dev/null 2>&1; then
    log_success "‚úÖ Puerto 3001 responde (Backend producci√≥n)"
    curl -s http://localhost:3001/api/health | jq -c '{success, environment}'
else
    log_warning "‚ö†Ô∏è  Puerto 3001 no responde"
fi

# Test puerto 5000 (Backend desarrollo)
echo
log_info "3.3 - Testing puerto 5000 (Backend desarrollo)"
if curl -f -s http://localhost:5000/api/health >/dev/null 2>&1; then
    log_warning "‚ö†Ô∏è  Puerto 5000 responde (¬°Configuraci√≥n de desarrollo en producci√≥n!)"
    curl -s http://localhost:5000/api/health | jq -c '{success, environment}'
else
    log_success "‚úÖ Puerto 5000 no responde (correcto en producci√≥n)"
fi

echo
log_info "PASO 4: Verificando configuraci√≥n esperada vs actual"

EXPECTED_BACKEND_PORT="3001"
EXPECTED_FRONTEND_PORT="3000"

ACTUAL_BACKEND_PORT=$(grep "PORT=" server/.env | cut -d'=' -f2 2>/dev/null || echo "NO_ENCONTRADO")
NODE_ENV=$(grep "NODE_ENV=" server/.env | cut -d'=' -f2 2>/dev/null || echo "NO_ENCONTRADO")

echo
echo "=== COMPARACI√ìN DE CONFIGURACI√ìN ==="
echo "Ambiente detectado: $NODE_ENV"
echo "Puerto backend esperado: $EXPECTED_BACKEND_PORT"
echo "Puerto backend configurado: $ACTUAL_BACKEND_PORT"
echo "Puerto frontend esperado: $EXPECTED_FRONTEND_PORT"

if [ "$NODE_ENV" = "production" ]; then
    if [ "$ACTUAL_BACKEND_PORT" = "$EXPECTED_BACKEND_PORT" ]; then
        log_success "‚úÖ Configuraci√≥n correcta para producci√≥n"
    else
        log_warning "‚ö†Ô∏è  Puerto backend incorrecto para producci√≥n"
        echo "   Esperado: $EXPECTED_BACKEND_PORT"
        echo "   Actual: $ACTUAL_BACKEND_PORT"
    fi
else
    log_warning "‚ö†Ô∏è  NODE_ENV no est√° configurado como 'production'"
fi

echo
log_info "PASO 5: Recomendaciones de correcci√≥n"

if [ "$ACTUAL_BACKEND_PORT" != "$EXPECTED_BACKEND_PORT" ] || [ "$NODE_ENV" != "production" ]; then
    echo
    echo "üîß CORRECCI√ìN NECESARIA:"
    echo "======================="
    echo "Tu configuraci√≥n actual en server/.env:"
    echo "   PORT=$ACTUAL_BACKEND_PORT"
    echo "   NODE_ENV=$NODE_ENV"
    echo
    echo "Deber√≠a ser (para producci√≥n):"
    echo "   PORT=3001"
    echo "   NODE_ENV=production"
    echo
    echo "üìã COMANDOS DE CORRECCI√ìN:"
    echo "sed -i 's/PORT=.*/PORT=3001/' server/.env"
    echo "sed -i 's/NODE_ENV=.*/NODE_ENV=production/' server/.env"
    echo
    echo "Despu√©s ejecutar:"
    echo "# Reiniciar backend para aplicar cambios"
    echo "# Verificar que funciona en puerto 3001"
else
    log_success "‚úÖ Configuraci√≥n de puertos es correcta"
fi

echo
log_info "PASO 6: Arquitectura de red en producci√≥n"

echo
echo "üåê ARQUITECTURA DE RED - PRODUCCI√ìN:"
echo "==================================="
echo "Internet ‚Üí Nginx (80/443) ‚Üí Backend (3001) + Frontend (3000)"
echo
echo "üîÄ Flujo de requests:"
echo "   https://industrial-iot.us/api/* ‚Üí Nginx ‚Üí localhost:3001 (Backend)"
echo "   https://industrial-iot.us/*     ‚Üí Nginx ‚Üí localhost:3000 (Frontend)"
echo
echo "üìä Puertos por ambiente:"
echo "   DESARROLLO (tu PC):"
echo "     ‚Ä¢ Backend: 5000"
echo "     ‚Ä¢ Frontend: 3000"
echo
echo "   PRODUCCI√ìN (VPS):"
echo "     ‚Ä¢ Backend: 3001 (interno)"
echo "     ‚Ä¢ Frontend: 3000 (interno)"
echo "     ‚Ä¢ Nginx: 80/443 (p√∫blico)"

echo
echo "üéØ RESUMEN:"
if netstat -tlnp | grep -q ":3001.*node" && netstat -tlnp | grep -q ":3000"; then
    log_success "‚úÖ Configuraci√≥n correcta detectada"
    log_success "‚úÖ Backend en 3001, Frontend en 3000, Nginx en 80/443"
elif netstat -tlnp | grep -q ":5000.*node"; then
    log_warning "‚ö†Ô∏è  Configuraci√≥n de desarrollo detectada en producci√≥n"
    log_warning "‚ö†Ô∏è  Backend corriendo en puerto 5000 (desarrollo) en lugar de 3001 (producci√≥n)"
else
    log_error "‚ùå Configuraci√≥n de puertos no clara"
fi

echo
log_success "Verificaci√≥n de puertos completada! üöÄ"